
use serde::{Serialize, Deserialize};
/**An *event* is an object representing a change to a resource that was
observed by an event subscription or delivered asynchronously to
the target location of an active webhook.

The event may be triggered by a different `user` than the
subscriber. For example, if user A subscribes to a task and user B
modified it, the eventâ€™s user will be user B. Note: Some events
are generated by the system, and will have `null` as the user. API
consumers should make sure to handle this case.

The `resource` that triggered the event may be different from the one
that the events were requested for or the webhook is subscribed to. For
example, a subscription to a project will contain events for tasks
contained within the project.

**Note:** pay close attention to the relationship between the fields
`Event.action` and `Event.change.action`.
`Event.action` represents the action taken on the resource
itself, and `Event.change.action` represents how the information
within the resource's fields have been modified.

For instance, consider these scenarios:


* When at task is added to a project, `Event.action` will be
`added`, `Event.parent` will be an object with the `id` and
`type` of the project, and there will be no `change` field.


* When an assignee is set on the task, `Event.parent` will be
`null`, `Event.action` will be `changed`,
`Event.change.action` will be `changed`, and `new_value` will
be an object with the user's `id` and `type`.


* When a collaborator is added to the task, `Event.parent` will
be `null`, `Event.action` will be `changed`,
`Event.change.action` will be `added`, and `added_value` will be
an object with the user's `id` and `type`.*/
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct EventResponse {
    ///The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.
    pub action: String,
    ///Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
    pub change: serde_json::Value,
    ///The timestamp when the event occurred.
    pub created_at: chrono::DateTime<chrono::Utc>,
    pub parent: serde_json::Value,
    pub resource: serde_json::Value,
    ///*Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
    #[serde(rename = "type")]
    pub type_: String,
    pub user: serde_json::Value,
}
impl std::fmt::Display for EventResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        write!(f, "{}", serde_json::to_string(self).unwrap())
    }
}